{"version":3,"sources":["components/base-component/index.tsx","components/button/button.tsx","page/intro/index.tsx","page/home/index.tsx","serviceWorker.js","index.js"],"names":["BaseComponent","_len","arguments","length","args","Array","_key","classnames","_len2","_key2","this","classNames","apply","concat","props","className","Object","assign","style","React","Component","Button","e","onClick","react_default","a","createElement","bind","children","Intro","Data","head","welcome","tag","button_Button","Home","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","intro_Intro","Boolean","window","location","hostname","match","ReactDOM","render","page_home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RA2BqBA,uLAMiB,QAAAC,EAAAC,UAAAC,OAApBC,EAAoB,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAApBF,EAAoBE,GAAAJ,UAAAI,GAC9B,OAAOC,IAAWH,uCAGW,QAAAI,EAAAN,UAAAC,OAApBC,EAAoB,IAAAC,MAAAG,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAApBL,EAAoBK,GAAAP,UAAAO,GAC7B,OAAOC,KAAKC,WAAWC,MAAMF,KAAMN,EAAKS,OAAO,CAACH,KAAKI,MAAMC,2CAGzDX,GACF,OAAOY,OAAOC,OAAO,GAAIb,EAAMM,KAAKI,MAAMI,cAXxCC,IAAMC,kBCvBKC,yLAETC,GACJZ,KAAKI,MAAMS,SAAWb,KAAKI,MAAMS,QAAQD,oCAIzC,OACIE,EAAAC,EAAAC,cAAA,UAASR,MAAOR,KAAKQ,QAASH,UAAWL,KAAKK,UAAU,YAAaQ,QAASb,KAAKa,QAAQI,KAAKjB,OAC5Fc,EAAAC,EAAAC,cAAA,YAAOhB,KAAKI,MAAMc,kBATE5B,ICCf6B,0LAGb,OACIL,EAAAC,EAAAC,cAAA,WAASX,UAAU,SACfS,EAAAC,EAAAC,cAAA,OAAKX,UAAU,kBACfS,EAAAC,EAAAC,cAAA,OAAKX,UAAU,cACXS,EAAAC,EAAAC,cAAA,OAAKX,UAAU,QAAQe,EAAKC,MAC5BP,EAAAC,EAAAC,cAAA,OAAKX,UAAU,WAAWe,EAAKE,SAC/BR,EAAAC,EAAAC,cAAA,OAAKX,UAAU,OACXS,EAAAC,EAAAC,cAAA,OAAKX,UAAU,YAAYe,EAAKG,IAAI,IACpCT,EAAAC,EAAAC,cAAA,OAAKX,UAAU,WACfS,EAAAC,EAAAC,cAAA,OAAKX,UAAU,YAAYe,EAAKG,IAAI,KAExCT,EAAAC,EAAAC,cAACQ,EAAD,CAAQnB,UAAU,YAAlB,0BAdef,ICoBpBmC,qBAlBX,SAAAA,EAAYrB,GAAiB,OAAAE,OAAAoB,EAAA,EAAApB,CAAAN,KAAAyB,GAAAnB,OAAAqB,EAAA,EAAArB,CAAAN,KAAAM,OAAAsB,EAAA,EAAAtB,CAAAmB,GAAAI,KAAA7B,KACnBI,wHAQN,OACIU,EAAAC,EAAAC,cAAA,OAAKX,UAAU,QACXS,EAAAC,EAAAC,cAAA,UAAQX,UAAU,WAClBS,EAAAC,EAAAC,cAACc,EAAD,cAdGxC,ICGCyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.50374fb1.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\ninterface ClassDictionary {\n    [id: string]: boolean | undefined | null;\n}\n\ninterface ClassArray extends Array<ClassValue> {}\ntype ClassValue =\n    | string\n    | number\n    | ClassDictionary\n    | ClassArray\n    | undefined\n    | null\n    | boolean;\n\nexport interface BaseProps {\n    /**\n     * 自定义class\n     */\n    className?: string;\n    /**\n     * 自定义样式\n     */\n    style?: React.CSSProperties;\n}\n\nexport default class BaseComponent<\n    TProps = {},\n    TState = {},\n    SS = {}\n> extends React.Component<BaseProps & TProps, TState, SS> {\n\n    classNames(...args: ClassValue[]) {\n        return classnames(args);\n    }\n\n    className(...args: ClassValue[]) {\n        return this.classNames.apply(this, args.concat([this.props.className]));\n    }\n\n    style(args?: React.CSSProperties) {\n        return Object.assign({}, args, this.props.style);\n    }\n    \n}","import React from 'react';\r\nimport BaseComponent from '../../components/base-component';\r\nimport './button.scss';\r\n\r\nexport interface Props {\r\n    onClick?:Function\r\n}\r\n\r\nexport default class Button extends BaseComponent<Props> {\r\n\r\n    onClick(e: React.SyntheticEvent): void {\r\n        this.props.onClick && this.props.onClick(e);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button  style={this.style()} className={this.className(\"base-btn\")} onClick={this.onClick.bind(this)}>\r\n                <span>{this.props.children}</span>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * Created by liuyuqin on 2019/1/24.\r\n */\r\nimport React from 'react';\r\nimport BaseComponent from '../../components/base-component';\r\nimport Data from '../../data/intro.json';\r\nimport Button from '../../components/button/button';\r\nimport './index.scss'\r\n\r\nexport default class Intro extends BaseComponent {\r\n\r\n    render(){\r\n        return (\r\n            <section className=\"intro\">\r\n                <div className=\"intro-overlay\"></div>\r\n                <div className=\"intro-view\">\r\n                    <div className=\"head\">{Data.head}</div>\r\n                    <div className=\"welcome\">{Data.welcome}</div>\r\n                    <div className=\"tag\">\r\n                        <div className=\"tag-item\">{Data.tag[0]}</div>\r\n                        <div className=\"divide\"/>\r\n                        <div className=\"tag-item\">{Data.tag[1]}</div>\r\n                    </div>\r\n                    <Button className=\"more-btn\">MORE ABOUT ME</Button>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport BaseComponent from '../../components/base-component';\r\nimport Intro from '../intro';\r\nimport './index.scss'\r\n\r\ninterface HomeProp{\r\n\r\n}\r\n\r\nclass Home extends BaseComponent {\r\n\r\n    constructor(props: HomeProp){\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount(){\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"home\">\r\n                <header className=\"header\"></header>\r\n                <Intro />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './page/home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}